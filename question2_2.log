spark-sql> (select a.job , a.age + (100 + 80) , Now() z from ( select distinct name, age , job from t_customer ) a where a.age>10 order by z)  except (select a.job , a.age + (100 + 80), Now() z from ( select distinct name, age , job from t_customer ) a where a.name = "George");

!                  +- AQEShuffleRead coalesced                                                                                                                                                                                                                                  +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
!                     +- ShuffleQueryStage 1                                                                                                                                                                                                                                       +- AQEShuffleRead coalesced
!                        +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                                   +- ShuffleQueryStage 1
!                           +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                        +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
!                              +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                                   +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
!                                 +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                          +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
!                                                                                                                                                                                                                                                                                                 +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger:
=== Result of Batch AQE Replanning ===
 HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])                                                                                                                  HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])
!+- HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                              +- Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#568]
!   +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                                 +- HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
!      +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false         +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
!         :- ShuffleQueryStage 2                                                                                                                                                                                                                                       +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
!         :  +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                                   :- ShuffleQueryStage 2
!         :     +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                              :  +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
!         :        +- AQEShuffleRead coalesced                                                                                                                                                                                                                            :     +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
!         :           +- ShuffleQueryStage 0                                                                                                                                                                                                                              :        +- AQEShuffleRead coalesced
!         :              +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                                       :           +- ShuffleQueryStage 0
!         :                 +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                         :              +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
!         :                    +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                                       :                 +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
!         :                       +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]                     :                    +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
!         +- BroadcastQueryStage 3                                                                                                                                                                                                                                        :                       +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
!            +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                                   +- BroadcastQueryStage 3
!               +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                                  +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
!                  +- AQEShuffleRead coalesced                                                                                                                                                                                                                                  +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
!                     +- ShuffleQueryStage 1                                                                                                                                                                                                                                       +- AQEShuffleRead coalesced
!                        +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                                   +- ShuffleQueryStage 1
!                           +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                        +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
!                              +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                                   +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
!                                 +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                          +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
!                                                                                                                                                                                                                                                                                                 +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger:
=== Applying Rule org.apache.spark.sql.execution.adaptive.CoalesceShufflePartitions ===
 HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                              HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
 +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                              +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
    +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false      +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
!      :- ShuffleQueryStage 2                                                                                                                                                                                                                                    :- AQEShuffleRead coalesced
!      :  +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                             :  +- ShuffleQueryStage 2
!      :     +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                        :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
!      :        +- AQEShuffleRead coalesced                                                                                                                                                                                                                      :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
!      :           +- ShuffleQueryStage 0                                                                                                                                                                                                                        :           +- AQEShuffleRead coalesced
!      :              +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                                 :              +- ShuffleQueryStage 0
!      :                 +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                   :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
!      :                    +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                                 :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
!      :                       +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]               :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
!      +- BroadcastQueryStage 3                                                                                                                                                                                                                                  :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
!         +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                             +- BroadcastQueryStage 3
!            +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                            +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
!               +- AQEShuffleRead coalesced                                                                                                                                                                                                                            +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
!                  +- ShuffleQueryStage 1                                                                                                                                                                                                                                 +- AQEShuffleRead coalesced
!                     +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                             +- ShuffleQueryStage 1
!                        +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                  +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
!                           +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                             +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
!                              +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                    +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
!                                                                                                                                                                                                                                                                                        +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger:
=== Applying Rule org.apache.spark.sql.execution.adaptive.OptimizeShuffleWithLocalRead ===
 HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                              HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
 +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                              +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
    +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false      +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
!      :- AQEShuffleRead coalesced                                                                                                                                                                                                                               :- AQEShuffleRead local
       :  +- ShuffleQueryStage 2                                                                                                                                                                                                                                 :  +- ShuffleQueryStage 2
       :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                          :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
       :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                     :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
       :           +- AQEShuffleRead coalesced                                                                                                                                                                                                                   :           +- AQEShuffleRead coalesced
       :              +- ShuffleQueryStage 0                                                                                                                                                                                                                     :              +- ShuffleQueryStage 0
       :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                              :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
       :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
       :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                              :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
       :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]            :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
       +- BroadcastQueryStage 3                                                                                                                                                                                                                                  +- BroadcastQueryStage 3
          +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                                +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
             +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                               +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
                +- AQEShuffleRead coalesced                                                                                                                                                                                                                               +- AQEShuffleRead coalesced
                   +- ShuffleQueryStage 1                                                                                                                                                                                                                                    +- ShuffleQueryStage 1
                      +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                                +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
                         +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                     +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
                            +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                                +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
                               +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                       +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger:
=== Result of Batch AQE Query Stage Optimization ===
 HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                              HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
 +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                              +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
    +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false      +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
!      :- ShuffleQueryStage 2                                                                                                                                                                                                                                    :- AQEShuffleRead local
!      :  +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                             :  +- ShuffleQueryStage 2
!      :     +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                        :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
!      :        +- AQEShuffleRead coalesced                                                                                                                                                                                                                      :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
!      :           +- ShuffleQueryStage 0                                                                                                                                                                                                                        :           +- AQEShuffleRead coalesced
!      :              +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                                 :              +- ShuffleQueryStage 0
!      :                 +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                   :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
!      :                    +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                                 :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
!      :                       +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]               :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
!      +- BroadcastQueryStage 3                                                                                                                                                                                                                                  :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
!         +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                             +- BroadcastQueryStage 3
!            +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                            +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
!               +- AQEShuffleRead coalesced                                                                                                                                                                                                                            +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
!                  +- ShuffleQueryStage 1                                                                                                                                                                                                                                 +- AQEShuffleRead coalesced
!                     +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                             +- ShuffleQueryStage 1
!                        +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                  +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
!                           +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                             +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
!                              +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                    +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
!                                                                                                                                                                                                                                                                                        +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger:
=== Applying Rule org.apache.spark.sql.execution.CollapseCodegenStages ===
!Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#586]                                                                                                                                    Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]
!+- HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                              +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
!   +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                                 +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
!      +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false         +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
          :- AQEShuffleRead local                                                                                                                                                                                                                                      :- AQEShuffleRead local
          :  +- ShuffleQueryStage 2                                                                                                                                                                                                                                    :  +- ShuffleQueryStage 2
          :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                             :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
          :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                        :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
          :           +- AQEShuffleRead coalesced                                                                                                                                                                                                                      :           +- AQEShuffleRead coalesced
          :              +- ShuffleQueryStage 0                                                                                                                                                                                                                        :              +- ShuffleQueryStage 0
          :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                                 :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
          :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                   :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
          :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                                 :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
          :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]               :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
          +- BroadcastQueryStage 3                                                                                                                                                                                                                                     +- BroadcastQueryStage 3
             +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                                   +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
                +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                                  +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
                   +- AQEShuffleRead coalesced                                                                                                                                                                                                                                  +- AQEShuffleRead coalesced
                      +- ShuffleQueryStage 1                                                                                                                                                                                                                                       +- ShuffleQueryStage 1
                         +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                                   +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
                            +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                        +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
                               +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                                   +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
                                  +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                          +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger:
=== Result of Batch AQE Post Stage Creation ===
!Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#586]                                                                                                                                    Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]
!+- HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                              +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
!   +- Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                                 +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
!      +- BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false         +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
          :- AQEShuffleRead local                                                                                                                                                                                                                                      :- AQEShuffleRead local
          :  +- ShuffleQueryStage 2                                                                                                                                                                                                                                    :  +- ShuffleQueryStage 2
          :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                             :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
          :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                        :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
          :           +- AQEShuffleRead coalesced                                                                                                                                                                                                                      :           +- AQEShuffleRead coalesced
          :              +- ShuffleQueryStage 0                                                                                                                                                                                                                        :              +- ShuffleQueryStage 0
          :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                                 :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
          :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                   :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
          :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                                 :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
          :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]               :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
          +- BroadcastQueryStage 3                                                                                                                                                                                                                                     +- BroadcastQueryStage 3
             +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                                   +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
                +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                                  +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
                   +- AQEShuffleRead coalesced                                                                                                                                                                                                                                  +- AQEShuffleRead coalesced
                      +- ShuffleQueryStage 1                                                                                                                                                                                                                                       +- ShuffleQueryStage 1
                         +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                                   +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
                            +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                        +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
                               +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                                   +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
                                  +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                          +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger: Batch CleanExpressions has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger:
=== Metrics of Executed Rules ===
Total number of runs: 1
Total time: 3.0389E-5 seconds
Total number of effective runs: 0
Total time of effective runs: 0.0 seconds

22/05/08 23:37:28 WARN PlanChangeLogger: Batch CleanExpressions has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger:
=== Metrics of Executed Rules ===
Total number of runs: 1
Total time: 6.39E-6 seconds
Total number of effective runs: 0
Total time of effective runs: 0.0 seconds

22/05/08 23:37:28 WARN PlanChangeLogger: Batch CleanExpressions has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger:
=== Metrics of Executed Rules ===
Total number of runs: 1
Total time: 4.44E-6 seconds
Total number of effective runs: 0
Total time of effective runs: 0.0 seconds

22/05/08 23:37:28 WARN PlanChangeLogger: Batch CleanExpressions has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger:
=== Metrics of Executed Rules ===
Total number of runs: 1
Total time: 3.331E-6 seconds
Total number of effective runs: 0
Total time of effective runs: 0.0 seconds

22/05/08 23:37:28 WARN PlanChangeLogger: Batch Propagate Empty Relations has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger: Batch Dynamic Join Selection has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger: Batch Eliminate Limits has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger: Batch Optimize One Row Plan has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger: Batch User Provided Runtime Optimizers has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger:
=== Metrics of Executed Rules ===
Total number of runs: 6
Total time: 1.19453E-4 seconds
Total number of effective runs: 0
Total time of effective runs: 0.0 seconds

22/05/08 23:37:28 WARN PlanChangeLogger: Batch AQE Replanning has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger:
=== Applying Rule org.apache.spark.sql.execution.adaptive.CoalesceShufflePartitions ===
 HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])                                                                                                                             HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])
!+- ShuffleQueryStage 4                                                                                                                                                                                                                                                  +- AQEShuffleRead coalesced
!   +- Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]                                                                                                                                            +- ShuffleQueryStage 4
!      +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                                    +- Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]
!         +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                                       +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
!            +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false               +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
!               :- AQEShuffleRead local                                                                                                                                                                                                                                                 +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
!               :  +- ShuffleQueryStage 2                                                                                                                                                                                                                                                  :- AQEShuffleRead local
!               :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                                           :  +- ShuffleQueryStage 2
!               :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                                      :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
!               :           +- AQEShuffleRead coalesced                                                                                                                                                                                                                                    :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
!               :              +- ShuffleQueryStage 0                                                                                                                                                                                                                                      :           +- AQEShuffleRead coalesced
!               :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                                               :              +- ShuffleQueryStage 0
!               :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                                 :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
!               :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                                               :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
!               :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]                             :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
!               +- BroadcastQueryStage 3                                                                                                                                                                                                                                                   :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
!                  +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                                              +- BroadcastQueryStage 3
!                     +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                                             +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
!                        +- AQEShuffleRead coalesced                                                                                                                                                                                                                                             +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
!                           +- ShuffleQueryStage 1                                                                                                                                                                                                                                                  +- AQEShuffleRead coalesced
!                              +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                                              +- ShuffleQueryStage 1
!                                 +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                                   +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
!                                    +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                                              +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
!                                       +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                                     +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
!                                                                                                                                                                                                                                                                                                                  +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger:
=== Result of Batch AQE Query Stage Optimization ===
 HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])                                                                                                                             HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])
!+- ShuffleQueryStage 4                                                                                                                                                                                                                                                  +- AQEShuffleRead coalesced
!   +- Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]                                                                                                                                            +- ShuffleQueryStage 4
!      +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                                    +- Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]
!         +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                                       +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
!            +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false               +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
!               :- AQEShuffleRead local                                                                                                                                                                                                                                                 +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
!               :  +- ShuffleQueryStage 2                                                                                                                                                                                                                                                  :- AQEShuffleRead local
!               :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                                           :  +- ShuffleQueryStage 2
!               :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                                      :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
!               :           +- AQEShuffleRead coalesced                                                                                                                                                                                                                                    :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
!               :              +- ShuffleQueryStage 0                                                                                                                                                                                                                                      :           +- AQEShuffleRead coalesced
!               :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                                               :              +- ShuffleQueryStage 0
!               :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                                 :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
!               :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                                               :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
!               :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]                             :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
!               +- BroadcastQueryStage 3                                                                                                                                                                                                                                                   :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
!                  +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                                              +- BroadcastQueryStage 3
!                     +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                                             +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
!                        +- AQEShuffleRead coalesced                                                                                                                                                                                                                                             +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
!                           +- ShuffleQueryStage 1                                                                                                                                                                                                                                                  +- AQEShuffleRead coalesced
!                              +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                                              +- ShuffleQueryStage 1
!                                 +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                                   +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
!                                    +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                                              +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
!                                       +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                                     +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
!                                                                                                                                                                                                                                                                                                                  +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger:
=== Applying Rule org.apache.spark.sql.execution.CollapseCodegenStages ===
!HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])                                                                                                                                *(6) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])
 +- AQEShuffleRead coalesced                                                                                                                                                                                                                                                +- AQEShuffleRead coalesced
    +- ShuffleQueryStage 4                                                                                                                                                                                                                                                     +- ShuffleQueryStage 4
       +- Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]                                                                                                                                               +- Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]
          +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                                       +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
             +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                                          +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
                +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false                  +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
                   :- AQEShuffleRead local                                                                                                                                                                                                                                                    :- AQEShuffleRead local
                   :  +- ShuffleQueryStage 2                                                                                                                                                                                                                                                  :  +- ShuffleQueryStage 2
                   :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                                           :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
                   :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                                      :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
                   :           +- AQEShuffleRead coalesced                                                                                                                                                                                                                                    :           +- AQEShuffleRead coalesced
                   :              +- ShuffleQueryStage 0                                                                                                                                                                                                                                      :              +- ShuffleQueryStage 0
                   :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                                               :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
                   :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                                 :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
                   :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                                               :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
                   :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]                             :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
                   +- BroadcastQueryStage 3                                                                                                                                                                                                                                                   +- BroadcastQueryStage 3
                      +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                                                 +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
                         +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                                                +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
                            +- AQEShuffleRead coalesced                                                                                                                                                                                                                                                +- AQEShuffleRead coalesced
                               +- ShuffleQueryStage 1                                                                                                                                                                                                                                                     +- ShuffleQueryStage 1
                                  +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                                                 +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
                                     +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                                      +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
                                        +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                                                 +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
                                           +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                                        +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger:
=== Result of Batch AQE Post Stage Creation ===
!HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])                                                                                                                                *(6) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, z#43])
 +- AQEShuffleRead coalesced                                                                                                                                                                                                                                                +- AQEShuffleRead coalesced
    +- ShuffleQueryStage 4                                                                                                                                                                                                                                                     +- ShuffleQueryStage 4
       +- Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]                                                                                                                                               +- Exchange hashpartitioning(job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60, 200), ENSURE_REQUIREMENTS, [id=#593]
          +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])                                                                       +- *(5) HashAggregate(keys=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624 AS 2022-05-08 23:37:27.624#60], functions=[], output=[job#47, (age + (100 + 80))#51, 2022-05-08 23:37:27.624#60])
             +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]                                                                                                                                                                                                          +- *(5) Project [job#47, (age#46 + 180) AS (age + (100 + 80))#51]
                +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false                  +- *(5) BroadcastHashJoin [coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180))], [coalesce(job#50, ), isnull(job#50), coalesce((age + (100 + 80))#52, 0), isnull((age + (100 + 80))#52)], LeftAnti, BuildRight, false
                   :- AQEShuffleRead local                                                                                                                                                                                                                                                    :- AQEShuffleRead local
                   :  +- ShuffleQueryStage 2                                                                                                                                                                                                                                                  :  +- ShuffleQueryStage 2
                   :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]                                                                                                           :     +- Exchange hashpartitioning(coalesce(job#47, ), isnull(job#47), coalesce((age#46 + 180), 0), isnull((age#46 + 180)), 200), ENSURE_REQUIREMENTS, [id=#466]
                   :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])                                                                                                                                                                      :        +- *(3) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[age#46, job#47])
                   :           +- AQEShuffleRead coalesced                                                                                                                                                                                                                                    :           +- AQEShuffleRead coalesced
                   :              +- ShuffleQueryStage 0                                                                                                                                                                                                                                      :              +- ShuffleQueryStage 0
                   :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]                                                                                                                                                               :                 +- Exchange hashpartitioning(name#45, age#46, job#47, 200), ENSURE_REQUIREMENTS, [id=#380]
                   :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])                                                                                                                                                 :                    +- *(1) HashAggregate(keys=[name#45, age#46, job#47], functions=[], output=[name#45, age#46, job#47])
                   :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))                                                                                                                                                                                               :                       +- *(1) Filter (isnotnull(age#46) AND (age#46 > 10))
                   :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]                             :                          +- Scan hive chchang.t_customer [name#45, age#46, job#47], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#45, age#46, job#47], Partition Cols: []]
                   +- BroadcastQueryStage 3                                                                                                                                                                                                                                                   +- BroadcastQueryStage 3
                      +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]                                                                 +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true])),false), [id=#517]
                         +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])                                                                                                                                                                +- *(4) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[job#50, (age + (100 + 80))#52])
                            +- AQEShuffleRead coalesced                                                                                                                                                                                                                                                +- AQEShuffleRead coalesced
                               +- ShuffleQueryStage 1                                                                                                                                                                                                                                                     +- ShuffleQueryStage 1
                                  +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]                                                                                                                                                                                 +- Exchange hashpartitioning(name#48, age#49, job#50, 200), ENSURE_REQUIREMENTS, [id=#397]
                                     +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])                                                                                                                                                                      +- *(2) HashAggregate(keys=[name#48, age#49, job#50], functions=[], output=[name#48, age#49, job#50])
                                        +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))                                                                                                                                                                                                                 +- *(2) Filter (isnotnull(name#48) AND (name#48 = George))
                                           +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]                                                        +- Scan hive chchang.t_customer [name#48, age#49, job#50], HiveTableRelation [`chchang`.`t_customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [name#48, age#49, job#50], Partition Cols: []]

22/05/08 23:37:28 WARN PlanChangeLogger: Batch CleanExpressions has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger:
=== Metrics of Executed Rules ===
Total number of runs: 1
Total time: 4.864E-6 seconds
Total number of effective runs: 0
Total time of effective runs: 0.0 seconds

22/05/08 23:37:28 WARN PlanChangeLogger: Batch CleanExpressions has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger:
=== Metrics of Executed Rules ===
Total number of runs: 1
Total time: 3.188E-6 seconds
Total number of effective runs: 0
Total time of effective runs: 0.0 seconds

22/05/08 23:37:28 WARN PlanChangeLogger: Batch CleanExpressions has no effect.
22/05/08 23:37:28 WARN PlanChangeLogger:
=== Metrics of Executed Rules ===
Total number of runs: 1
Total time: 2.118E-6 seconds
Total number of effective runs: 0
Total time of effective runs: 0.0 seconds

Developer	202	2022-05-08 23:37:27.624
Developer	210	2022-05-08 23:37:27.624
Developer	212	2022-05-08 23:37:27.624
Time taken: 0.769 seconds, Fetched 3 row(s)
spark-sql>
